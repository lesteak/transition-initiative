// Mixin for font declaration syntax
@mixin declare-font-face($font-family, $font-filename, $font-weight: normal, $font-style: normal, $font-stretch: normal) {
  @font-face {
    font-family: '#{$font-family}';
    src: url('../fonts/#{$font-filename}.woff2') format('woff2'),
      url('../fonts/#{$font-filename}.woff') format('woff');
    font-weight: $font-weight;
    font-style: $font-style;
    font-stretch: $font-stretch;
  }
}

// Strip them units
@function strip-unit($num) {
  @return $num / ($num * 0 + 1);
}

// Return a rem value based on px. Uses $font-size-root from BS4 variables file.
@function rem($px-value) {
  $root-value: strip-unit($font-size-root);
  $value: strip-unit($px-value);
  $rem-value: ($value / $root-value) + rem;
  @return $rem-value;
}

// Truncate text with CSS
@mixin truncate($overflow: ellipsis) {
  overflow: hidden;
  white-space: nowrap;
  text-overflow: $overflow; // values are: clip, ellipsis, or a string
}

// Social media colors
@function get-social-media-colour($colour) {
  @if map-has-key($socialColours, $colour) {
    $colour: map-get($socialColours, $colour);
  } @else { /* stylelint-disable-line block-closing-brace-newline-after */
    @if type-of($colour) != colour {
      @error "Invalid colour name: `#{$colour}`.";
    }
  }
  @return $colour;
}

// Demo...
// .twitter {
//   color: get-social-media-colour(twitter);
// }
